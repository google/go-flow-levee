digraph {
	subgraph cluster_0 {
		color=black;
		label="entry";
		"jump 3\n(Jump)" [shape=diamond];
	}
	subgraph cluster_1 {
		color=black;
		label="for.body";
		"t0 = t4 - 1:int\n(BinOp)" [shape=rectangle];
		"t1 = t0 + 1:int\n(BinOp)" [shape=rectangle];
		"jump 3\n(Jump)" [shape=diamond];
	}
	subgraph cluster_2 {
		color=black;
		label="for.done";
		"t2 = \"error: \":string + \"unreachable code\":string\n(BinOp)" [shape=rectangle];
		"t3 = fmt.Printf(t2, nil:[]interface{}...)\n(Call)" [shape=rectangle];
		"return\n(Return)" [shape=diamond];
	}
	subgraph cluster_3 {
		color=black;
		label="for.loop";
		"t4 = phi [0: 0:int, 1: t1] #i\n(Phi)" [shape=rectangle];
		"t5 = 1:int * 2:int\n(BinOp)" [shape=rectangle];
		"t6 = t4 < t5\n(BinOp)" [shape=rectangle];
		"if t6 goto 1 else 2\n(If)" [shape=diamond];
	}
	"t4 = phi [0: 0:int, 1: t1] #i\n(Phi)" -> "t0 = t4 - 1:int\n(BinOp)" [color=orange];
	"1:int\n(Const)" -> "t0 = t4 - 1:int\n(BinOp)" [color=orange];
	"t0 = t4 - 1:int\n(BinOp)" -> "t1 = t0 + 1:int\n(BinOp)" [color=orange];
	"1:int\n(Const)" -> "t1 = t0 + 1:int\n(BinOp)" [color=orange];
	"\"error: \":string\n(Const)" -> "t2 = \"error: \":string + \"unreachable code\":string\n(BinOp)" [color=orange];
	"\"unreachable code\":string\n(Const)" -> "t2 = \"error: \":string + \"unreachable code\":string\n(BinOp)" [color=orange];
	"Printf\n(Function)" -> "t3 = fmt.Printf(t2, nil:[]interface{}...)\n(Call)" [color=orange];
	"t2 = \"error: \":string + \"unreachable code\":string\n(BinOp)" -> "t3 = fmt.Printf(t2, nil:[]interface{}...)\n(Call)" [color=orange];
	"nil:[]interface{}\n(Const)" -> "t3 = fmt.Printf(t2, nil:[]interface{}...)\n(Call)" [color=orange];
	"0:int\n(Const)" -> "t4 = phi [0: 0:int, 1: t1] #i\n(Phi)" [color=orange];
	"t1 = t0 + 1:int\n(BinOp)" -> "t4 = phi [0: 0:int, 1: t1] #i\n(Phi)" [color=orange];
	"1:int\n(Const)" -> "t5 = 1:int * 2:int\n(BinOp)" [color=orange];
	"2:int\n(Const)" -> "t5 = 1:int * 2:int\n(BinOp)" [color=orange];
	"t4 = phi [0: 0:int, 1: t1] #i\n(Phi)" -> "t6 = t4 < t5\n(BinOp)" [color=orange];
	"t5 = 1:int * 2:int\n(BinOp)" -> "t6 = t4 < t5\n(BinOp)" [color=orange];
	"t6 = t4 < t5\n(BinOp)" -> "if t6 goto 1 else 2\n(If)" [color=orange];
}
