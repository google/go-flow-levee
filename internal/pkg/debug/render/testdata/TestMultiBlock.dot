digraph {
	subgraph cluster_0 {
		color=black;
		label="entry";
		"t0 = local image.Point (p)\n(Alloc)" [shape=rectangle];
		"t1 = &t0.X [#0]\n(FieldAddr)" [shape=rectangle];
		"t2 = &t0.Y [#1]\n(FieldAddr)" [shape=rectangle];
		"*t1 = 1:int\n(Store)" [shape=diamond];
		"*t2 = 2:int\n(Store)" [shape=diamond];
		"t3 = &t0.X [#0]\n(FieldAddr)" [shape=rectangle];
		"t4 = *t3\n(UnOp)" [shape=rectangle];
		"t5 = t4 > 0:int\n(BinOp)" [shape=rectangle];
		"if t5 goto 1 else 3\n(If)" [shape=diamond];
	}
	subgraph cluster_1 {
		color=black;
		label="if.then";
		"t6 = &t0.Y [#1]\n(FieldAddr)" [shape=rectangle];
		"t7 = *t6\n(UnOp)" [shape=rectangle];
		"t8 = t7 > 0:int\n(BinOp)" [shape=rectangle];
		"if t8 goto 4 else 2\n(If)" [shape=diamond];
	}
	subgraph cluster_2 {
		color=black;
		label="if.done";
		"return\n(Return)" [shape=diamond];
	}
	subgraph cluster_3 {
		color=black;
		label="if.else";
		"t9 = new [1]interface{} (varargs)\n(Alloc)" [shape=rectangle];
		"t10 = &t9[0:int]\n(IndexAddr)" [shape=rectangle];
		"t11 = make interface{} <- string (\"somewhere\":string)\n(MakeInterface)" [shape=rectangle];
		"*t10 = t11\n(Store)" [shape=diamond];
		"t12 = slice t9[:]\n(Slice)" [shape=rectangle];
		"t13 = fmt.Println(t12...)\n(Call)" [shape=rectangle];
		"jump 2\n(Jump)" [shape=diamond];
	}
	subgraph cluster_4 {
		color=black;
		label="if.then";
		"t14 = &t0.X [#0]\n(FieldAddr)" [shape=rectangle];
		"t15 = *t14\n(UnOp)" [shape=rectangle];
		"t16 = &t0.Y [#1]\n(FieldAddr)" [shape=rectangle];
		"t17 = *t16\n(UnOp)" [shape=rectangle];
		"t18 = new [2]interface{} (varargs)\n(Alloc)" [shape=rectangle];
		"t19 = &t18[0:int]\n(IndexAddr)" [shape=rectangle];
		"t20 = make interface{} <- int (t15)\n(MakeInterface)" [shape=rectangle];
		"*t19 = t20\n(Store)" [shape=diamond];
		"t21 = &t18[1:int]\n(IndexAddr)" [shape=rectangle];
		"t22 = make interface{} <- int (t17)\n(MakeInterface)" [shape=rectangle];
		"*t21 = t22\n(Store)" [shape=diamond];
		"t23 = slice t18[:]\n(Slice)" [shape=rectangle];
		"t24 = fmt.Printf(\"in top right quad...\":string, t23...)\n(Call)" [shape=rectangle];
		"jump 2\n(Jump)" [shape=diamond];
	}
	"t0 = local image.Point (p)\n(Alloc)" -> "t1 = &t0.X [#0]\n(FieldAddr)" [color=red];
	"t0 = local image.Point (p)\n(Alloc)" -> "t2 = &t0.Y [#1]\n(FieldAddr)" [color=red];
	"t0 = local image.Point (p)\n(Alloc)" -> "t3 = &t0.X [#0]\n(FieldAddr)" [color=red];
	"t0 = local image.Point (p)\n(Alloc)" -> "t6 = &t0.Y [#1]\n(FieldAddr)" [color=red];
	"t0 = local image.Point (p)\n(Alloc)" -> "t14 = &t0.X [#0]\n(FieldAddr)" [color=red];
	"t0 = local image.Point (p)\n(Alloc)" -> "t16 = &t0.Y [#1]\n(FieldAddr)" [color=red];
	"t1 = &t0.X [#0]\n(FieldAddr)" -> "*t1 = 1:int\n(Store)" [color=red];
	"t1 = &t0.X [#0]\n(FieldAddr)" -> "t0 = local image.Point (p)\n(Alloc)" [color=orange];
	"t2 = &t0.Y [#1]\n(FieldAddr)" -> "*t2 = 2:int\n(Store)" [color=red];
	"t2 = &t0.Y [#1]\n(FieldAddr)" -> "t0 = local image.Point (p)\n(Alloc)" [color=orange];
	"*t1 = 1:int\n(Store)" -> "t1 = &t0.X [#0]\n(FieldAddr)" [color=orange];
	"*t1 = 1:int\n(Store)" -> "1:int\n(Const)" [color=orange];
	"*t2 = 2:int\n(Store)" -> "t2 = &t0.Y [#1]\n(FieldAddr)" [color=orange];
	"*t2 = 2:int\n(Store)" -> "2:int\n(Const)" [color=orange];
	"t3 = &t0.X [#0]\n(FieldAddr)" -> "t4 = *t3\n(UnOp)" [color=red];
	"t3 = &t0.X [#0]\n(FieldAddr)" -> "t0 = local image.Point (p)\n(Alloc)" [color=orange];
	"t4 = *t3\n(UnOp)" -> "t5 = t4 > 0:int\n(BinOp)" [color=red];
	"t4 = *t3\n(UnOp)" -> "t3 = &t0.X [#0]\n(FieldAddr)" [color=orange];
	"t5 = t4 > 0:int\n(BinOp)" -> "if t5 goto 1 else 3\n(If)" [color=red];
	"t5 = t4 > 0:int\n(BinOp)" -> "t4 = *t3\n(UnOp)" [color=orange];
	"t5 = t4 > 0:int\n(BinOp)" -> "0:int\n(Const)" [color=orange];
	"if t5 goto 1 else 3\n(If)" -> "t5 = t4 > 0:int\n(BinOp)" [color=orange];
	"t6 = &t0.Y [#1]\n(FieldAddr)" -> "t7 = *t6\n(UnOp)" [color=red];
	"t6 = &t0.Y [#1]\n(FieldAddr)" -> "t0 = local image.Point (p)\n(Alloc)" [color=orange];
	"t7 = *t6\n(UnOp)" -> "t8 = t7 > 0:int\n(BinOp)" [color=red];
	"t7 = *t6\n(UnOp)" -> "t6 = &t0.Y [#1]\n(FieldAddr)" [color=orange];
	"t8 = t7 > 0:int\n(BinOp)" -> "if t8 goto 4 else 2\n(If)" [color=red];
	"t8 = t7 > 0:int\n(BinOp)" -> "t7 = *t6\n(UnOp)" [color=orange];
	"t8 = t7 > 0:int\n(BinOp)" -> "0:int\n(Const)" [color=orange];
	"if t8 goto 4 else 2\n(If)" -> "t8 = t7 > 0:int\n(BinOp)" [color=orange];
	"t9 = new [1]interface{} (varargs)\n(Alloc)" -> "t10 = &t9[0:int]\n(IndexAddr)" [color=red];
	"t9 = new [1]interface{} (varargs)\n(Alloc)" -> "t12 = slice t9[:]\n(Slice)" [color=red];
	"t10 = &t9[0:int]\n(IndexAddr)" -> "*t10 = t11\n(Store)" [color=red];
	"t10 = &t9[0:int]\n(IndexAddr)" -> "t9 = new [1]interface{} (varargs)\n(Alloc)" [color=orange];
	"t10 = &t9[0:int]\n(IndexAddr)" -> "0:int\n(Const)" [color=orange];
	"t11 = make interface{} <- string (\"somewhere\":string)\n(MakeInterface)" -> "*t10 = t11\n(Store)" [color=red];
	"t11 = make interface{} <- string (\"somewhere\":string)\n(MakeInterface)" -> "\"somewhere\":string\n(Const)" [color=orange];
	"*t10 = t11\n(Store)" -> "t10 = &t9[0:int]\n(IndexAddr)" [color=orange];
	"*t10 = t11\n(Store)" -> "t11 = make interface{} <- string (\"somewhere\":string)\n(MakeInterface)" [color=orange];
	"t12 = slice t9[:]\n(Slice)" -> "t13 = fmt.Println(t12...)\n(Call)" [color=red];
	"t12 = slice t9[:]\n(Slice)" -> "t9 = new [1]interface{} (varargs)\n(Alloc)" [color=orange];
	"t13 = fmt.Println(t12...)\n(Call)" -> "Println\n(Function)" [color=orange];
	"t13 = fmt.Println(t12...)\n(Call)" -> "t12 = slice t9[:]\n(Slice)" [color=orange];
	"t14 = &t0.X [#0]\n(FieldAddr)" -> "t15 = *t14\n(UnOp)" [color=red];
	"t14 = &t0.X [#0]\n(FieldAddr)" -> "t0 = local image.Point (p)\n(Alloc)" [color=orange];
	"t15 = *t14\n(UnOp)" -> "t20 = make interface{} <- int (t15)\n(MakeInterface)" [color=red];
	"t15 = *t14\n(UnOp)" -> "t14 = &t0.X [#0]\n(FieldAddr)" [color=orange];
	"t16 = &t0.Y [#1]\n(FieldAddr)" -> "t17 = *t16\n(UnOp)" [color=red];
	"t16 = &t0.Y [#1]\n(FieldAddr)" -> "t0 = local image.Point (p)\n(Alloc)" [color=orange];
	"t17 = *t16\n(UnOp)" -> "t22 = make interface{} <- int (t17)\n(MakeInterface)" [color=red];
	"t17 = *t16\n(UnOp)" -> "t16 = &t0.Y [#1]\n(FieldAddr)" [color=orange];
	"t18 = new [2]interface{} (varargs)\n(Alloc)" -> "t19 = &t18[0:int]\n(IndexAddr)" [color=red];
	"t18 = new [2]interface{} (varargs)\n(Alloc)" -> "t21 = &t18[1:int]\n(IndexAddr)" [color=red];
	"t18 = new [2]interface{} (varargs)\n(Alloc)" -> "t23 = slice t18[:]\n(Slice)" [color=red];
	"t19 = &t18[0:int]\n(IndexAddr)" -> "*t19 = t20\n(Store)" [color=red];
	"t19 = &t18[0:int]\n(IndexAddr)" -> "t18 = new [2]interface{} (varargs)\n(Alloc)" [color=orange];
	"t19 = &t18[0:int]\n(IndexAddr)" -> "0:int\n(Const)" [color=orange];
	"t20 = make interface{} <- int (t15)\n(MakeInterface)" -> "*t19 = t20\n(Store)" [color=red];
	"t20 = make interface{} <- int (t15)\n(MakeInterface)" -> "t15 = *t14\n(UnOp)" [color=orange];
	"*t19 = t20\n(Store)" -> "t19 = &t18[0:int]\n(IndexAddr)" [color=orange];
	"*t19 = t20\n(Store)" -> "t20 = make interface{} <- int (t15)\n(MakeInterface)" [color=orange];
	"t21 = &t18[1:int]\n(IndexAddr)" -> "*t21 = t22\n(Store)" [color=red];
	"t21 = &t18[1:int]\n(IndexAddr)" -> "t18 = new [2]interface{} (varargs)\n(Alloc)" [color=orange];
	"t21 = &t18[1:int]\n(IndexAddr)" -> "1:int\n(Const)" [color=orange];
	"t22 = make interface{} <- int (t17)\n(MakeInterface)" -> "*t21 = t22\n(Store)" [color=red];
	"t22 = make interface{} <- int (t17)\n(MakeInterface)" -> "t17 = *t16\n(UnOp)" [color=orange];
	"*t21 = t22\n(Store)" -> "t21 = &t18[1:int]\n(IndexAddr)" [color=orange];
	"*t21 = t22\n(Store)" -> "t22 = make interface{} <- int (t17)\n(MakeInterface)" [color=orange];
	"t23 = slice t18[:]\n(Slice)" -> "t24 = fmt.Printf(\"in top right quad...\":string, t23...)\n(Call)" [color=red];
	"t23 = slice t18[:]\n(Slice)" -> "t18 = new [2]interface{} (varargs)\n(Alloc)" [color=orange];
	"t24 = fmt.Printf(\"in top right quad...\":string, t23...)\n(Call)" -> "Printf\n(Function)" [color=orange];
	"t24 = fmt.Printf(\"in top right quad...\":string, t23...)\n(Call)" -> "\"in top right quad...\":string\n(Const)" [color=orange];
	"t24 = fmt.Printf(\"in top right quad...\":string, t23...)\n(Call)" -> "t23 = slice t18[:]\n(Slice)" [color=orange];
}
